[{"content":"","date":"9 January 2023","permalink":"/tags/.net/","section":"Tags","summary":"","title":".Net"},{"content":"","date":"9 January 2023","permalink":"/tags/best-practices/","section":"Tags","summary":"","title":"Best Practices"},{"content":"","date":"9 January 2023","permalink":"/","section":"Home","summary":"","title":"Home"},{"content":"","date":"9 January 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"9 January 2023","permalink":"/tags/selenium/","section":"Tags","summary":"","title":"Selenium"},{"content":"If you want to cover your application with stable, fast, effective and easy to maintain automated tests, you should follow few simple rules, that will make your life easier.\nIn this article I will tell you about Selenium and Specflow great features and practices based on my E2E tests development experience.\nLocators\u003e\rLocators # Do NOT use XPath\nXPath locator with the absolute path to the DOM element will lead you to the errors with the slightest change in the HTML structure.\nUsing of relative path in XPath locator will solve this problem, however, it will work slower, then other types of locators.\ndriver.findElement(By.xpath(\u0026#34;/html/body/div[7]/div[3]) ‚ùå Such locators are also hard to read and maintain.\nWhat locators should be used instead?\nThe good practice is to use the following locators:\nHtml element identifier driver.findElement(By.Id(\u0026#34;loginForm\u0026#34;)) ‚úÖ CSS class driver.findElement(By.ClassName(\u0026#34;myTable\u0026#34;)) ‚úÖ CSS selector driver.findElement(By.CssSelector(\u0026#34;[data-qa=\u0026#39;object-id\u0026#39;]\u0026#34;) ‚úÖ As you may have noticed, I\u0026rsquo;ve used data-qa attribute selector. Using of such attributes is a great approach. You will not depend on any ids or classes, that can be change during development, you will define your own attributes just for your locators.\nEven if you need to find the element by some text, you can avoid the use of XPath with nested locators.\ndrive.FindElements(By.TagName(\u0026#34;a\u0026#34;)).First(e =\u0026gt; e.Text == \u0026#34;Car\u0026#34;) ‚úÖ P.S. Feel free to use remaining locators like By.TagName or By.Name, but be careful, you can have more than one DOM element with the specified name on the page.\nConclusion: try to avoid the use of XPath as long as possible üòÑ\nWaits\u003e\rWaits # Do NOT use Thread.Sleep\nYou\u0026rsquo;ve made a click on the button and waiting for some element to appear before content verification. How to deal with it?\nThe simplest solution you can think of, is to use Thread.Sleep, but this idea is not as good as you might think.\nFor example, you are calling Thread.Sleep for 10 seconds, but what happens when your element only takes 2-3 seconds to load? Right, you are waiting for remaining 7-8 seconds to continue tests execution. So, Thread.Sleep will lead you to increased tests execution time in cases, where elements are loaded earlier than we expect. Also, in general, the use of Thread.Sleep is considered to be a bad practice.\nWhat can be used instead of Thread.Sleep?\nSelenium provides us with powerful Wait mechanisms, that make our code more flexible. There are several types of them.\nImplicit Wait\u003e\rImplicit Wait # Unlike Thread.Sleep, implicit wait doesn\u0026rsquo;t wait for complete time duration. If an element is found before specified wait duration, it will continue execution of your next line of the code immediately.\nImplicit wait is useful, when you need to apply wait mechanism once for all elements specified in your test script.\ndriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\r// Your locators Explicit Wait\u003e\rExplicit Wait # Explicit wait is waiting for some condition to occur. Unlike implicit wait that is used for all elements in the test script, explicit wait works only on the particular element.\nvar wait = new WebDriverWait(driver, timeout: TimeSpan.FromSeconds(10));\rwait.Until(driver =\u0026gt; driver.FindElement(By.Id(\u0026#34;loginForm\u0026#34;))) Fluent Wait\u003e\rFluent Wait # As well as maximum timeout time, in the fluent wait you are setting the value of how often the condition should be evaluated.\nYou can also configure the wait to ignore specific types of exceptions.\nvar wait = new WebDriverWait(driver, timeout: TimeSpan.FromSeconds(10))\r{\rPollingInterval = TimeSpan.FromMilliseconds(2000)\r};\rwait.IgnoreExceptionTypes(typeof(ElementClickInterceptedException));\rwait.Until(driver =\u0026gt; driver.FindElement(By.Id(\u0026#34;loginButton\u0026#34;))) As you can see, all types of waits are similar to each other. If you need to wait for particular DOM element to appear, feel free to use explicit or fluent wait. If you need to wait for all elements on the page, you can use implicit wait.\nImportant: Do not use different types of waits at the same time. It will lead you to unpredictable wait times.\nHooks\u003e\rHooks # Specflow hooks allow you to run automated scripts at specific time, e.g., after each scenario or before each test step. Specflow hooks, combined with Selenium is a powerful tool that can make your tests more stable and reliable.\nIn this section I will talk about few most useful hooks.\nBrowser session management\u003e\rBrowser session management # DO finish your browser session after each test run.\nThis simple hook will help you to keep your client storage clean before each test run.\n[AfterScenario]\rinternal static void FinishBrowserSession(IWebDriver driver)\r{\rdriver.Quit();\r} Such approach is very useful in case when you need to login under different users. Having this hook frees you from adding logout logic and prevent you from possible flakiness caused by old/not updated client storage values.\nTest failures management\u003e\rTest failures management # When you have a lot of E2E tests, it\u0026rsquo;s not uncommon for some test to fail on the one of your environments. Having logs will make it easier to find the issue, but what if you will have few screenshots of your browser right in the moment of the failure? Yeah, these pictures will be your real salvation, especially if your page has lots of dynamically loaded elements.\nSelenium provides us with mechanism of making page screenshots. Combination of this mechanism with Specflow hook will make your logging much more useful.\n[AfterStep]\r[BeforeStep]\rinternal static void AfterStep(IWebDriver driver)\r{\rvar screenShot = ((ITakesScreenshot)driver).GetScreenshot();\rvar path = \u0026#34;Full path to the image\u0026#34;;\rscreenShot.SaveAsFile(path, ScreenshotImageFormat.Png);\r// Store screenshots references, e.g., in scenario or feature context for further processing\r} In the example above, we are making screenshots and store them before and after each step.\nWith current implementation you will have tons of images that will take up a lot of space on the disk. Let\u0026rsquo;s add one more hook to fix this.\n[AfterScenario]\rinternal static void AfterScenario(TestContext testContext)\r{\r// If scenario passed, let\u0026#39;s remove all the screenshots\rif (testContext.CurrentTestOutcome == UnitTestOutcome.Passed)\r{\r// Retrieve screenshots references from the context\r...\r// Remove screenshots from the disk\rforeach (var screenShot in screenShots)\r{\rFile.Delete(screenShot);\r}\r}\r// If scenario failed, we keep screenshots on the disk\r} P.S. You can also use hooks to setup/clean some data before/after each test run.\nConclusion\u003e\rConclusion # Combination of right Selenium and Specflow approaches ensures, that your application works as expected.\n","date":"9 January 2023","permalink":"/posts/selenium-with-specflow-best-practices/","section":"Posts","summary":"If you want to cover your application with stable, fast, effective and easy to maintain automated tests, you should follow few simple rules, that will make your life easier.\nIn this article I will tell you about Selenium and Specflow great features and practices based on my E2E tests development experience.","title":"Selenium with Specflow best practices .Net"},{"content":"","date":"9 January 2023","permalink":"/tags/specflow/","section":"Tags","summary":"","title":"Specflow"},{"content":"","date":"9 January 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"9 January 2023","permalink":"/tags/tests-automation/","section":"Tags","summary":"","title":"Tests Automation"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]